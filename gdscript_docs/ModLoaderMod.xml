<?xml version="1.0" encoding="UTF-8" ?>
<class name="ModLoaderMod" inherits="Object" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
		This Class provides helper functions to build mods.
	</brief_description>
	<description>
	</description>
	<tutorials>
		<link title="Script Extensions">https://wiki.godotmodding.com/#/guides/modding/script_extensions</link>
		<link title="Script Hooks">https://wiki.godotmodding.com/#/guides/modding/script_hooks</link>
		<link title="Mod Structure">https://wiki.godotmodding.com/#/guides/modding/mod_structure</link>
		<link title="Mod Files">https://wiki.godotmodding.com/#/guides/modding/mod_files</link>
	</tutorials>
	<methods>
		<method name="install_script_extension" qualifiers="static">
			<return type="void" />
			<param index="0" name="child_script_path" type="String" />
			<description>
				Installs a script extension that extends a vanilla script.[br][br][b]Parameters:[/b][br]- [param child_script_path] ([String]): The path to the mod's extender script.[br][br][b]Returns:[/b][br]- No return value[br][br]This is the preferred way of modifying a vanilla [Script][br]Since Godot 4, extensions can cause issues with scripts that use [code]class_name[/code] and should be avoided if present.[br]See [method add_hook] for those cases.[br][br]The [param child_script_path] should point to your mod's extender script.[br]Example: [code]"MOD/extensions/singletons/utils.gd"[/code][br]Inside the extender script, include [code]extends {target}[/code] where [code]{target}[/code] is the vanilla path.[br]Example: [code]extends "res://singletons/utils.gd"[/code].[br]===[br][b]Note:[/b][br]Your extender script doesn't have to follow the same directory path as the vanilla file, but it's good practice to do so.[br]===[br][br]
			</description>
		</method>
		<method name="install_script_hooks" qualifiers="static">
			<return type="void" />
			<param index="0" name="vanilla_script_path" type="String" />
			<param index="1" name="hook_script_path" type="String" />
			<description>
				Adds all methods from a file as hooks. [br][br][b]Parameters:[/b][br]- [param vanilla_script_path] ([String]): The path to the script which will be hooked.[br]- [param hook_script_path] ([String]): The path to the script containing hooks.[br][br][b]Returns:[/b][br]- No return value[br][br]The file needs to extend [Object].[br]The methods in the file need to have the exact same name as the vanilla method they intend to hook, all mismatches will be ignored. [br]See: [method add_hook] [br][b]Examples:[/b][br]
[codeblock]
ModLoaderMod.install_script_hooks(
    "res://tools/utilities.gd",
    extensions_dir_path.path_join("tools/utilities-hook.gd")
)
[/codeblock]
			</description>
		</method>
		<method name="add_hook" qualifiers="static">
			<return type="void" />
			<param index="0" name="mod_callable" type="Callable" />
			<param index="1" name="script_path" type="String" />
			<param index="2" name="method_name" type="String" />
			<description>
				Adds a hook, a custom mod function, to a vanilla method.[br][br][b]Parameters:[/b][br]- [param mod_callable] ([Callable]): The function that will executed when the vanilla method is executed. When writing a mod callable, make sure that it [i]always[/i] receives a [ModLoaderHookChain] object as first argument, which is used to continue down the hook chain (see: [method ModLoaderHookChain.execute_next]) and allows manipulating parameters before and return values after the vanilla method is called. [br]- [param script_path] ([String]): Path to the vanilla script that holds the method.[br]- [param method_name] ([String]): The method the hook will be applied to.[br][br][b]Returns:[/b][br][br]- No return value[br][br]Opposed to script extensions, hooks can be applied to scripts that use [code]class_name[/code] without issues.[br]If possible, prefer [method install_script_extension].[br][br][b]Examples:[/b][br][br]Given the following vanilla script [code]main.gd[/code]
[codeblock]
class_name MainGame
extends Node2D

var version := "vanilla 1.0.0"


func _ready():
    $CanvasLayer/Control/Label.text = "Version: %s" % version
    print(Utilities.format_date(15, 11, 2024))
[/codeblock]
 It can be hooked in [code]mod_main.gd[/code] like this
[codeblock]
func _init() -&gt; void:
    ModLoaderMod.add_hook(change_version, "res://main.gd", "_ready")
    ModLoaderMod.add_hook(time_travel, "res://tools/utilities.gd", "format_date")
    # Multiple hooks can be added to a single method.
    ModLoaderMod.add_hook(add_season, "res://tools/utilities.gd", "format_date")


# The script we are hooking is attached to a node, which we can get from reference_object
# then we can change any variables it has
func change_version(chain: ModLoaderHookChain) -&gt; void:
    # Using a typecast here (with "as") can help with autocomplete and avoiding errors
    var main_node := chain.reference_object as MainGame
    main_node.version = "Modloader Hooked!"
    # _ready, which we are hooking, does not have any arguments
    chain.execute_next()


# Parameters can be manipulated easily by changing what is passed into .execute_next()
# The vanilla method (Utilities.format_date) takes 3 arguments, our hook method takes
# the ModLoaderHookChain followed by the same 3
func time_travel(chain: ModLoaderHookChain, day: int, month: int, year: int) -&gt; String:
    print("time travel!")
    year -= 100
    # Just the vanilla arguments are passed along in the same order, wrapped into an Array
    var val = chain.execute_next([day, month, year])
    return val


# The return value can be manipulated by calling the next hook (or vanilla) first
# then changing it and returning the new value.
func add_season(chain: ModLoaderHookChain, day: int, month: int, year: int) -&gt; String:
    var output = chain.execute_next([day, month, year])
    match month:
        12, 1, 2:
            output += ", Winter"
        3, 4, 5:
            output += ", Spring"
        6, 7, 8:
            output += ", Summer"
        9, 10, 11:
            output += ", Autumn"
    return output
[/codeblock]
			</description>
		</method>
		<method name="register_global_classes_from_array" qualifiers="static">
			<return type="void" />
			<param index="0" name="new_global_classes" type="Array" />
			<description>
				Registers an array of classes to the global scope since Godot only does that in the editor.[br][br][b]Parameters:[/b][br]- [param new_global_classes] ([Array]): An array of class definitions to be registered.[br][br][b]Returns:[/b][br]- No return value[br][br]Format: [code]{ "base": "ParentClass", "class": "ClassName", "language": "GDScript", "path": "res://path/class_name.gd" }[/code][br][br]===[br][b]Tip:[/b][color=tip][/color][br]You can find these easily in the project.godot file under `_global_script_classes`[br](but you should only include classes belonging to your mod)[br]===[br]
			</description>
		</method>
		<method name="add_translation" qualifiers="static">
			<return type="void" />
			<param index="0" name="resource_path" type="String" />
			<description>
				Adds a translation file.[br][br][b]Parameters:[/b][br]- [param resource_path] ([String]): The path to the translation resource file.[br][b]Returns:[/b][br]- No return value[br][br]===[br][b]Note:[/b][br]The [code].translation[/code] file should have been created by the Godot editor already, usually when importing a CSV file. The translation file should named [code]name.langcode.translation[/code] -&gt; [code]mytranslation.en.translation[/code].[br]===[br]
			</description>
		</method>
		<method name="refresh_scene" qualifiers="static">
			<return type="void" />
			<param index="0" name="scene_path" type="String" />
			<description>
				Marks the given scene for to be refreshed. It will be refreshed at the correct point in time later.[br][br][b]Parameters:[/b][br]- [param scene_path] ([String]): The path to the scene file to be refreshed. [br][b]Returns:[/b][br]- No return value[br][br]===[br][b]Note:[/b][color=abstract "Version"][/color][br]This function requires Godot 4.3 or higher.[br]===[br][br]This function is useful if a script extension is not automatically applied. This situation can occur when a script is attached to a preloaded scene. If you encounter issues where your script extension is not working as expected, try to identify the scene to which it is attached and use this method to refresh it. This will reload already loaded scenes and apply the script extension. [br]
			</description>
		</method>
		<method name="extend_scene" qualifiers="static">
			<return type="void" />
			<param index="0" name="scene_vanilla_path" type="String" />
			<param index="1" name="edit_callable" type="Callable" />
			<description>
				Extends a specific scene by providing a callable function to modify it. [br][b]Parameters:[/b][br]- [param scene_vanilla_path] ([String]): The path to the vanilla scene file.[br]- [param edit_callable] ([Callable]): The callable function to modify the scene.[br][br][b]Returns:[/b][br]- No return value[br][br]The callable receives an instance of the "vanilla_scene" as the first parameter.[br]
			</description>
		</method>
		<method name="get_mod_data" qualifiers="static">
			<return type="ModData" />
			<param index="0" name="mod_id" type="String" />
			<description>
				Gets the [ModData] from the provided namespace.[br][br][b]Parameters:[/b][br]- [param mod_id] ([String]): The ID of the mod.[br][br][b]Returns:[/b][br]- [ModData]: The [ModData] associated with the provided [code]mod_id[/code], or null if the [code]mod_id[/code] is invalid.[br]
			</description>
		</method>
		<method name="get_mod_data_all" qualifiers="static">
			<return type="Dictionary" />
			<description>
				Gets the [ModData] of all loaded Mods as [Dictionary].[br][br][b]Returns:[/b][br]- [Dictionary]: A dictionary containing the [ModData] of all loaded mods.[br]
			</description>
		</method>
		<method name="get_unpacked_dir" qualifiers="static">
			<return type="String" />
			<description>
				Returns the path to the directory where unpacked mods are stored.[br][br][b]Returns:[/b][br]- [String]: The path to the unpacked mods directory.[br]
			</description>
		</method>
		<method name="is_mod_loaded" qualifiers="static">
			<return type="bool" />
			<param index="0" name="mod_id" type="String" />
			<description>
				Returns true if the mod with the given [code]mod_id[/code] was successfully loaded.[br][br][b]Parameters:[/b][br]- [param mod_id] ([String]): The ID of the mod.[br][br][b]Returns:[/b][br]- [bool]: true if the mod is loaded, false otherwise.[br]
			</description>
		</method>
		<method name="is_mod_active" qualifiers="static">
			<return type="bool" />
			<param index="0" name="mod_id" type="String" />
			<description>
				Returns true if the mod with the given mod_id was successfully loaded and is currently active. [br]Parameters: - [param mod_id] ([String]): The ID of the mod. [br]Returns: - [bool]: true if the mod is loaded and active, false otherwise.
			</description>
		</method>
	</methods>
	<constants>
		<constant name="LOG_NAME" value="&quot;ModLoader:Mod&quot;">
		</constant>
	</constants>
</class>
